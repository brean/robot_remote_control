
#set(CMAKE_BUILD_TYPE Release)

include(GNUInstallDirs)

link_directories(${CMAKE_INSTALL_PREFIX}/lib)


# generate header with sha256sum of the protocol defining files
set(PROTOCOL_FILES Types/RobotRemoteControl.proto MessageTypes.hpp)

# PROTOCOL_FILES is ";" seperated, create a " " seperated string:
string(REPLACE ";" " " PROTOCOL_FILES_STRING "${PROTOCOL_FILES}")

# escape char overload: for the console, it should look like awk '{print "\"" $1 "\"" }' to place the checksum (without " -" in the end) as a string with "" to the file
# for this '{print "\"" $1 "\"" }' has to be escaped for the cmake interpreter, so a trailing \ is aded to each char and an additional $ before $
# this command takes the first part of a line (space delimited) and puts in into ""
set(AWK_COMMAND awk '{print \"\\\"\" $$1 \"\\\"\"}')

add_custom_command( OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/ProtocolVersion.hpp
                    COMMENT "Generating Protocol Version header by sha256 checksum of ${PROTOCOL_FILES_STRING}"
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                    COMMAND echo '/*' > ProtocolVersion.hpp  # echo /* is a dir listing using '' to output /*
                    COMMAND echo " * This header is autogenerated, do not edit" >> ProtocolVersion.hpp
                    COMMAND echo " */" >> ProtocolVersion.hpp
                    COMMAND echo "'#'pragma once" >> ProtocolVersion.hpp # need to exacpe # with '' cmake inpterprets as comment otherwise
                    COMMAND echo "// PROTOCOL_VERSION is the sha256sum checksum of the protocol defining files: ${PROTOCOL_FILES_STRING}" >> ProtocolVersion.hpp
                    COMMAND echo -n "'#'define PROTOCOL_VERSION_CHECKSUM " >> ProtocolVersion.hpp # -n: no newline, escaped #
                    COMMAND echo -n ${PROTOCOL_FILES_STRING} | xargs cat | sha256sum | ${AWK_COMMAND} >> ProtocolVersion.hpp # PROTOCOL_FILES_STRING is a single sting with spaces seperated needs to go though xargs
                    DEPENDS ${PROTOCOL_FILES}
                    )

add_custom_command( OUTPUT ${CMAKE_CURRENT_SOURCE_DIR}/LibraryVersion.hpp
                    COMMENT "Generating Library Version Header"
                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
                    COMMAND echo '/*' > LibraryVersion.hpp  # echo /* is a dir listing using '' to output /*
                    COMMAND echo " * This header is autogenerated, do not edit. Change the version in the ../VERSION file" >> LibraryVersion.hpp
                    COMMAND echo " */" >> LibraryVersion.hpp
                    COMMAND echo "'#'pragma once" >> LibraryVersion.hpp # need to exacpe # with '' cmake inpterprets as comment otherwise
                    COMMAND echo -n "'#'define LIBRARY_VERSION_STRING " >> LibraryVersion.hpp # -n: no newline, escaped #
                    COMMAND head -1 ../VERSION | ${AWK_COMMAND} >> LibraryVersion.hpp
                    DEPENDS ../VERSION
                    )

set(VERSIONHEADERS ProtocolVersion.hpp LibraryVersion.hpp)
add_custom_target(versionheaders DEPENDS ${VERSIONHEADERS})

execute_process(
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    COMMAND /bin/bash "-c" "git rev-parse HEAD | head -c -1 | awk '{print \"\\\"\" $1 \"\\\"\"}' | head -c -1"
    OUTPUT_VARIABLE GIT_ID
)
message(${GIT_ID})
add_compile_definitions(GIT_COMMIT_ID=${GIT_ID})

add_subdirectory(Types)
add_subdirectory(UpdateThread)
add_subdirectory(Transports)

add_subdirectory(ControlledRobot)
add_subdirectory(RobotController)

add_subdirectory(CLI)
add_subdirectory(Tools)





#install src folder headers
install(FILES
	MessageTypes.hpp
	RingBuffer.hpp
	CommandBuffer.hpp
	TelemetryBuffer.hpp
	Statistics.hpp
	DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/robot_remote_control
)



#Export the library interface
install(
    EXPORT robot_remote_control-targets
	#NAMESPACE robot_remote_control::
	DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/robot_remote_control
)


# Create and install the version file
include(CMakePackageConfigHelpers)
write_basic_package_version_file("robot_remote_control-version.cmake"
	VERSION ${VERSION}
	COMPATIBILITY SameMajorVersion
)

install(
	FILES
		robot_remote_control-config.cmake
        ${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-version.cmake
	DESTINATION
		${CMAKE_INSTALL_LIBDIR}/cmake/robot_remote_control
)


# Install pkg-config files
configure_file(robot_remote_control-types.pc.in robot_remote_control-types.pc @ONLY)
configure_file(robot_remote_control-update_thread.pc.in robot_remote_control-update_thread.pc @ONLY)
configure_file(robot_remote_control-transport_zmq.pc.in robot_remote_control-transport_zmq.pc @ONLY)
configure_file(robot_remote_control-controlled_robot.pc.in robot_remote_control-controlled_robot.pc @ONLY)
configure_file(robot_remote_control-robot_controller.pc.in robot_remote_control-robot_controller.pc @ONLY)
configure_file(robot_remote_control-send_timers.pc.in robot_remote_control-send_timers.pc @ONLY)
configure_file(robot_remote_control-simple_action_helper.pc.in robot_remote_control-simple_action_helper.pc @ONLY)

install(FILES 
	${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-types.pc
	${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-update_thread.pc
	${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-transport_zmq.pc
	${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-controlled_robot.pc
	${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-robot_controller.pc
	${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-send_timers.pc
    ${CMAKE_CURRENT_BINARY_DIR}/robot_remote_control-simple_action_helper.pc
	DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
)

# install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/
# 	DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig
# 	FILES_MATCHING PATTERN "*.pc"
# )
